{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuthenticationContext } from './useAuthenticationContext';\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthenticationContext();\n  const [csrfToken, setCsrfToken] = useState(null);\n\n  // Function to fetch a new CSRF token\n  const refreshCsrfToken = async () => {\n    const response = await fetch('/api/csrf-token');\n    const data = await response.json();\n    setCsrfToken(data.csrfToken);\n  };\n  useEffect(() => {\n    refreshCsrfToken(); // Fetch token on mount\n  }, []);\n  const login = async (fullName, accountNumber, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'CSRF-Token': csrfToken\n      },\n      body: JSON.stringify({\n        fullName,\n        accountNumber,\n        password\n      })\n    });\n    const json = await response.json();\n    if (response.status === 429) {\n      setIsLoading(false);\n      setError('Too many requests. Please try again later.');\n      return {\n        ok: false\n      };\n    }\n    if (!response.ok) {\n      setError(json.error);\n      setIsLoading(false);\n    }\n    if (response.ok) {\n      localStorage.setItem('user', JSON.stringify(json));\n      dispatch({\n        type: 'LOGIN',\n        payload: json\n      });\n      setIsLoading(false);\n      await refreshCsrfToken(); // Refresh CSRF token after successful login\n    }\n    return response;\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"6VScIgnvIBaUO7tA2b6i0xqWHQo=\", false, function () {\n  return [useAuthenticationContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuthenticationContext","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","csrfToken","setCsrfToken","refreshCsrfToken","response","fetch","data","json","login","fullName","accountNumber","password","method","headers","body","JSON","stringify","status","ok","localStorage","setItem","type","payload"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/useLogin.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useAuthenticationContext } from './useAuthenticationContext'\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(null)\r\n  const { dispatch } = useAuthenticationContext()\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n\r\n  // Function to fetch a new CSRF token\r\n  const refreshCsrfToken = async () => {\r\n    const response = await fetch('/api/csrf-token')\r\n    const data = await response.json()\r\n    setCsrfToken(data.csrfToken)\r\n  }\r\n\r\n  useEffect(() => {\r\n    refreshCsrfToken() // Fetch token on mount\r\n  }, [])\r\n\r\n  const login = async (fullName, accountNumber, password) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    const response = await fetch('api/users/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'CSRF-Token': csrfToken,\r\n      },\r\n      body: JSON.stringify({ fullName, accountNumber, password }),\r\n    })\r\n\r\n    const json = await response.json()\r\n\r\n    if (response.status === 429) {\r\n      setIsLoading(false)\r\n      setError('Too many requests. Please try again later.')\r\n      return { ok: false }\r\n    }\r\n\r\n    if (!response.ok) {\r\n      setError(json.error)\r\n      setIsLoading(false)\r\n    }\r\n    if (response.ok) {\r\n      localStorage.setItem('user', JSON.stringify(json))\r\n      dispatch({ type: 'LOGIN', payload: json })\r\n      setIsLoading(false)\r\n      await refreshCsrfToken() // Refresh CSRF token after successful login\r\n    }\r\n    return response\r\n  }\r\n  return { login, isLoading, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,wBAAwB,QAAQ,4BAA4B;AAErE,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAES;EAAS,CAAC,GAAGP,wBAAwB,CAAC,CAAC;EAC/C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;IAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCL,YAAY,CAACI,IAAI,CAACL,SAAS,CAAC;EAC9B,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdW,gBAAgB,CAAC,CAAC,EAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,KAAK;IACzDZ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC9CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAEZ;MAChB,CAAC;MACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,QAAQ;QAAEC,aAAa;QAAEC;MAAS,CAAC;IAC5D,CAAC,CAAC;IAEF,MAAMJ,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAIH,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MAC3BlB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAAC,4CAA4C,CAAC;MACtD,OAAO;QAAEqB,EAAE,EAAE;MAAM,CAAC;IACtB;IAEA,IAAI,CAACd,QAAQ,CAACc,EAAE,EAAE;MAChBrB,QAAQ,CAACU,IAAI,CAACX,KAAK,CAAC;MACpBG,YAAY,CAAC,KAAK,CAAC;IACrB;IACA,IAAIK,QAAQ,CAACc,EAAE,EAAE;MACfC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC,CAAC;MAClDP,QAAQ,CAAC;QAAEqB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEf;MAAK,CAAC,CAAC;MAC1CR,YAAY,CAAC,KAAK,CAAC;MACnB,MAAMI,gBAAgB,CAAC,CAAC,EAAC;IAC3B;IACA,OAAOC,QAAQ;EACjB,CAAC;EACD,OAAO;IAAEI,KAAK;IAAEV,SAAS;IAAEF;EAAM,CAAC;AACpC,CAAC;AAAAD,EAAA,CAnDYD,QAAQ;EAAA,QAGED,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}