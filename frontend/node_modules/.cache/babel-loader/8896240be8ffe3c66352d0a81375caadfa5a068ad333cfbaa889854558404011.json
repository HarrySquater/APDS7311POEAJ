{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useUserDetails.js\nimport { useState, useEffect } from 'react';\nexport const useUserDetails = () => {\n  _s();\n  const [userDetails, setUserDetails] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(null);\n  const [csrfToken, setCsrfToken] = useState(null);\n  useEffect(() => {\n    //fetch token\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await fetch('/api/csrf-token');\n        const data = await response.json();\n        setCsrfToken(data.csrfToken);\n      } catch (error) {\n        console.error('Failed to fetch CSRF token:', error);\n      }\n    };\n    fetchCsrfToken();\n  }, []);\n\n  //fetch user by id\n  const fetchUserDetails = async userId => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'GET',\n        headers: {\n          'CSRF-Token': csrfToken\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to load user details');\n      }\n      const userData = await response.json();\n      setUserDetails(userData);\n      setMessage('User details loaded successfully');\n      setIsLoading(false);\n      return {\n        ok: true,\n        user: userData\n      };\n    } catch (error) {\n      setMessage(error.message);\n      setError(error.message);\n      setIsLoading(false);\n      return {\n        ok: false\n      };\n    }\n  };\n  return {\n    fetchUserDetails,\n    userDetails,\n    error,\n    isLoading,\n    message\n  };\n};\n_s(useUserDetails, \"Wf4PPkhYryLn6Lfrx6dt2TXzyMs=\");","map":{"version":3,"names":["useState","useEffect","useUserDetails","_s","userDetails","setUserDetails","error","setError","isLoading","setIsLoading","message","setMessage","csrfToken","setCsrfToken","fetchCsrfToken","response","fetch","data","json","console","fetchUserDetails","userId","method","headers","ok","Error","userData","user"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/useUserDetails.js"],"sourcesContent":["// src/hooks/useUserDetails.js\r\nimport { useState, useEffect } from 'react'\r\n\r\nexport const useUserDetails = () => {\r\n  const [userDetails, setUserDetails] = useState(null)\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n\r\n  useEffect(() => {\r\n    //fetch token\r\n    const fetchCsrfToken = async () => {\r\n      try {\r\n        const response = await fetch('/api/csrf-token')\r\n        const data = await response.json()\r\n        setCsrfToken(data.csrfToken)\r\n      } catch (error) {\r\n        console.error('Failed to fetch CSRF token:', error)\r\n      }\r\n    }\r\n    fetchCsrfToken()\r\n  }, [])\r\n\r\n  //fetch user by id\r\n  const fetchUserDetails = async (userId) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await fetch(`/api/users/${userId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'CSRF-Token': csrfToken,\r\n        },\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to load user details')\r\n      }\r\n\r\n      const userData = await response.json()\r\n      setUserDetails(userData)\r\n      setMessage('User details loaded successfully')\r\n      setIsLoading(false)\r\n      return { ok: true, user: userData }\r\n    } catch (error) {\r\n      setMessage(error.message)\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      return { ok: false }\r\n    }\r\n  }\r\n\r\n  return {\r\n    fetchUserDetails,\r\n    userDetails,\r\n    error,\r\n    isLoading,\r\n    message,\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;QAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,YAAY,CAACI,IAAI,CAACL,SAAS,CAAC;MAC9B,CAAC,CAAC,OAAON,KAAK,EAAE;QACda,OAAO,CAACb,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACDQ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzCZ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAcK,MAAM,EAAE,EAAE;QACnDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,YAAY,EAAEX;QAChB;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACG,IAAI,CAAC,CAAC;MACtCb,cAAc,CAACqB,QAAQ,CAAC;MACxBf,UAAU,CAAC,kCAAkC,CAAC;MAC9CF,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEe,EAAE,EAAE,IAAI;QAAEG,IAAI,EAAED;MAAS,CAAC;IACrC,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdK,UAAU,CAACL,KAAK,CAACI,OAAO,CAAC;MACzBH,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;MACvBD,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEe,EAAE,EAAE;MAAM,CAAC;IACtB;EACF,CAAC;EAED,OAAO;IACLJ,gBAAgB;IAChBhB,WAAW;IACXE,KAAK;IACLE,SAAS;IACTE;EACF,CAAC;AACH,CAAC;AAAAP,EAAA,CA1DYD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}