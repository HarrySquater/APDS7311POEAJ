{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuthenticationContext } from './useAuthenticationContext';\nexport const useLogout = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthenticationContext();\n  const [csrfToken, setCsrfToken] = useState(null);\n\n  // Fetch the CSRF token on component mount\n  useEffect(() => {\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await fetch('/api/csrf-token'); // Adjust this endpoint if necessary\n        const data = await response.json();\n        setCsrfToken(data.csrfToken);\n      } catch (error) {\n        console.error('Failed to fetch CSRF token:', error);\n      }\n    };\n    fetchCsrfToken();\n  }, []);\n  const logout = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/users/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': csrfToken // Include CSRF token in the header\n        }\n      });\n      const json = await response.json();\n      if (response.ok) {\n        // Successfully logged out\n        localStorage.removeItem('user');\n        dispatch({\n          type: 'LOGOUT'\n        });\n        window.location.href = '/'; // Redirect to login page or home page\n      } else {\n        setError(json.error || 'Failed to log out');\n      }\n    } catch (error) {\n      setError('An error occurred during logout');\n      console.error('Error during logout:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    logout,\n    isLoading,\n    error\n  };\n};\n_s(useLogout, \"PGf9nQbTv8Ow0aj2NFclmoR2Nxs=\", false, function () {\n  return [useAuthenticationContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuthenticationContext","useLogout","_s","error","setError","isLoading","setIsLoading","dispatch","csrfToken","setCsrfToken","fetchCsrfToken","response","fetch","data","json","console","logout","method","headers","ok","localStorage","removeItem","type","window","location","href"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/useLogout.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useAuthenticationContext } from './useAuthenticationContext'\r\n\r\nexport const useLogout = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const { dispatch } = useAuthenticationContext()\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n\r\n  // Fetch the CSRF token on component mount\r\n  useEffect(() => {\r\n    const fetchCsrfToken = async () => {\r\n      try {\r\n        const response = await fetch('/api/csrf-token') // Adjust this endpoint if necessary\r\n        const data = await response.json()\r\n        setCsrfToken(data.csrfToken)\r\n      } catch (error) {\r\n        console.error('Failed to fetch CSRF token:', error)\r\n      }\r\n    }\r\n    fetchCsrfToken()\r\n  }, [])\r\n\r\n  const logout = async () => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await fetch('/api/users/logout', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'CSRF-Token': csrfToken, // Include CSRF token in the header\r\n        },\r\n      })\r\n\r\n      const json = await response.json()\r\n\r\n      if (response.ok) {\r\n        // Successfully logged out\r\n        localStorage.removeItem('user')\r\n        dispatch({ type: 'LOGOUT' })\r\n        window.location.href = '/' // Redirect to login page or home page\r\n      } else {\r\n        setError(json.error || 'Failed to log out')\r\n      }\r\n    } catch (error) {\r\n      setError('An error occurred during logout')\r\n      console.error('Error during logout:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return { logout, isLoading, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,wBAAwB,QAAQ,4BAA4B;AAErE,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAES;EAAS,CAAC,GAAGP,wBAAwB,CAAC,CAAC;EAC/C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC,EAAC;QAChD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,YAAY,CAACI,IAAI,CAACL,SAAS,CAAC;MAC9B,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdY,OAAO,CAACZ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACDO,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBV,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;QAChDK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEV,SAAS,CAAE;QAC3B;MACF,CAAC,CAAC;MAEF,MAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACQ,EAAE,EAAE;QACf;QACAC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;QAC/Bd,QAAQ,CAAC;UAAEe,IAAI,EAAE;QAAS,CAAC,CAAC;QAC5BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,EAAC;MAC7B,CAAC,MAAM;QACLrB,QAAQ,CAACU,IAAI,CAACX,KAAK,IAAI,mBAAmB,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,QAAQ,CAAC,iCAAiC,CAAC;MAC3CW,OAAO,CAACZ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,SAAS;MACRG,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEU,MAAM;IAAEX,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAAAD,EAAA,CApDYD,SAAS;EAAA,QAGCD,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}