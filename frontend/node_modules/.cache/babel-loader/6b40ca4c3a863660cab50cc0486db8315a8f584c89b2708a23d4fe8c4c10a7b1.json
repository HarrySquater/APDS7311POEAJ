{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAdminAuthenticationContext } from './useAdminAuthenticationContext';\nexport const useAdminSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAdminAuthenticationContext();\n  const [csrfToken, setCsrfToken] = useState(null);\n  useEffect(() => {\n    // fetching the CSRF token\n    const fetchCsrfToken = async () => {\n      const response = await fetch('/api/csrf-token');\n      const data = await response.json();\n      setCsrfToken(data.csrfToken);\n    };\n    fetchCsrfToken();\n  }, []);\n  const adminSignup = async (idNumber, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('api/admin/signupadmin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'CSRF-Token': csrfToken\n      },\n      body: JSON.stringify({\n        idNumber,\n        password\n      })\n    });\n    const json = await response.json();\n    if (response.status === 429) {\n      setIsLoading(false);\n      setError('Too many requests. Please try again later.');\n      return {\n        ok: false\n      };\n    }\n    if (!response.ok) {\n      setError(json.error);\n      setIsLoading(false);\n    } else {\n      // Assuming backend sends back TOTP data, like a QR code URL or secret\n      const {\n        totpSetup\n      } = json; // assuming `totpSetup` contains the TOTP setup info\n\n      if (totpSetup) {\n        localStorage.setItem('totpSetup', JSON.stringify(totpSetup)); // store the TOTP setup info temporarily\n      }\n      localStorage.setItem('admin', JSON.stringify(json));\n      dispatch({\n        type: 'ADMINLOGIN',\n        payload: json\n      });\n      setIsLoading(false);\n    }\n    return response;\n  };\n  return {\n    adminSignup,\n    isLoading,\n    error\n  };\n};\n_s(useAdminSignup, \"L7XbUuEzpDsyNjMuO9upG/R9oAs=\", false, function () {\n  return [useAdminAuthenticationContext];\n});","map":{"version":3,"names":["useState","useEffect","useAdminAuthenticationContext","useAdminSignup","_s","error","setError","isLoading","setIsLoading","dispatch","csrfToken","setCsrfToken","fetchCsrfToken","response","fetch","data","json","adminSignup","idNumber","password","method","headers","body","JSON","stringify","status","ok","totpSetup","localStorage","setItem","type","payload"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/useAdminSignup.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useAdminAuthenticationContext } from './useAdminAuthenticationContext'\r\n\r\nexport const useAdminSignup = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(null)\r\n  const { dispatch } = useAdminAuthenticationContext()\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n\r\n  useEffect(() => {\r\n    // fetching the CSRF token\r\n    const fetchCsrfToken = async () => {\r\n      const response = await fetch('/api/csrf-token')\r\n      const data = await response.json()\r\n      setCsrfToken(data.csrfToken)\r\n    }\r\n    fetchCsrfToken()\r\n  }, [])\r\n\r\n  const adminSignup = async (idNumber, password) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    const response = await fetch('api/admin/signupadmin', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'CSRF-Token': csrfToken,\r\n      },\r\n      body: JSON.stringify({ idNumber, password }),\r\n    })\r\n\r\n    const json = await response.json()\r\n\r\n    if (response.status === 429) {\r\n      setIsLoading(false)\r\n      setError('Too many requests. Please try again later.')\r\n      return { ok: false }\r\n    }\r\n\r\n    if (!response.ok) {\r\n      setError(json.error)\r\n      setIsLoading(false)\r\n    } else {\r\n      // Assuming backend sends back TOTP data, like a QR code URL or secret\r\n      const { totpSetup } = json // assuming `totpSetup` contains the TOTP setup info\r\n\r\n      if (totpSetup) {\r\n        localStorage.setItem('totpSetup', JSON.stringify(totpSetup)) // store the TOTP setup info temporarily\r\n      }\r\n\r\n      localStorage.setItem('admin', JSON.stringify(json))\r\n      dispatch({ type: 'ADMINLOGIN', payload: json })\r\n      setIsLoading(false)\r\n    }\r\n\r\n    return response\r\n  }\r\n\r\n  return { adminSignup, isLoading, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,6BAA6B,QAAQ,iCAAiC;AAE/E,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAES;EAAS,CAAC,GAAGP,6BAA6B,CAAC,CAAC;EACpD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;MAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,YAAY,CAACI,IAAI,CAACL,SAAS,CAAC;IAC9B,CAAC;IACDE,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAChDX,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;MACpDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAEX;MAChB,CAAC;MACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMH,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAIH,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;MAC3BjB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAAC,4CAA4C,CAAC;MACtD,OAAO;QAAEoB,EAAE,EAAE;MAAM,CAAC;IACtB;IAEA,IAAI,CAACb,QAAQ,CAACa,EAAE,EAAE;MAChBpB,QAAQ,CAACU,IAAI,CAACX,KAAK,CAAC;MACpBG,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACL;MACA,MAAM;QAAEmB;MAAU,CAAC,GAAGX,IAAI,EAAC;;MAE3B,IAAIW,SAAS,EAAE;QACbC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEN,IAAI,CAACC,SAAS,CAACG,SAAS,CAAC,CAAC,EAAC;MAC/D;MAEAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;MACnDP,QAAQ,CAAC;QAAEqB,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAEf;MAAK,CAAC,CAAC;MAC/CR,YAAY,CAAC,KAAK,CAAC;IACrB;IAEA,OAAOK,QAAQ;EACjB,CAAC;EAED,OAAO;IAAEI,WAAW;IAAEV,SAAS;IAAEF;EAAM,CAAC;AAC1C,CAAC;AAAAD,EAAA,CAzDYD,cAAc;EAAA,QAGJD,6BAA6B;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}