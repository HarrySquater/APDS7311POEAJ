{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuthenticationContext } from './useAuthenticationContext';\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthenticationContext();\n  const [csrfToken, setCsrfToken] = useState(null);\n  useEffect(() => {\n    //fetching the CSRF token\n    const fetchCsrfToken = async () => {\n      const response = await fetch('/api/csrf-token');\n      const data = await response.json();\n      setCsrfToken(data.csrfToken);\n    };\n    fetchCsrfToken();\n  }, []);\n  const signup = async (fullName, idNumber, accountNumber, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('api/users/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'CSRF-Token': csrfToken\n      },\n      body: JSON.stringify({\n        fullName,\n        idNumber,\n        accountNumber,\n        password\n      })\n    });\n    const json = await response.json();\n    if (response.status === 429) {\n      setIsLoading(false);\n      setError('Too many requests. Please try again later.');\n      return {\n        ok: false\n      };\n    }\n    if (!response.ok) {\n      setError(json.error);\n      setIsLoading(false);\n    }\n    if (response.ok) {\n      localStorage.setItem('user', JSON.stringify(json));\n      dispatch({\n        type: 'LOGIN',\n        payload: json\n      });\n      setIsLoading(false);\n    }\n    return response;\n  };\n  return {\n    signup,\n    isLoading,\n    error\n  };\n};\n_s(useSignup, \"6VScIgnvIBaUO7tA2b6i0xqWHQo=\", false, function () {\n  return [useAuthenticationContext];\n});","map":{"version":3,"names":["useState","useEffect","useAuthenticationContext","useSignup","_s","error","setError","isLoading","setIsLoading","dispatch","csrfToken","setCsrfToken","fetchCsrfToken","response","fetch","data","json","signup","fullName","idNumber","accountNumber","password","method","headers","body","JSON","stringify","status","ok","localStorage","setItem","type","payload"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/useSignup.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useAuthenticationContext } from './useAuthenticationContext'\r\n\r\nexport const useSignup = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(null)\r\n  const { dispatch } = useAuthenticationContext()\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n\r\n  useEffect(() => {\r\n    //fetching the CSRF token\r\n    const fetchCsrfToken = async () => {\r\n      const response = await fetch('/api/csrf-token')\r\n      const data = await response.json()\r\n      setCsrfToken(data.csrfToken)\r\n    }\r\n    fetchCsrfToken()\r\n  }, [])\r\n\r\n  const signup = async (fullName, idNumber, accountNumber, password) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    const response = await fetch('api/users/signup', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'CSRF-Token': csrfToken,\r\n      },\r\n      body: JSON.stringify({ fullName, idNumber, accountNumber, password }),\r\n    })\r\n\r\n    const json = await response.json()\r\n\r\n    if (response.status === 429) {\r\n      setIsLoading(false)\r\n      setError('Too many requests. Please try again later.')\r\n      return { ok: false }\r\n    }\r\n\r\n    if (!response.ok) {\r\n      setError(json.error)\r\n      setIsLoading(false)\r\n    }\r\n    if (response.ok) {\r\n      localStorage.setItem('user', JSON.stringify(json))\r\n      dispatch({ type: 'LOGIN', payload: json })\r\n      setIsLoading(false)\r\n    }\r\n    return response\r\n  }\r\n\r\n  return { signup, isLoading, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,wBAAwB,QAAQ,4BAA4B;AAErE,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAES;EAAS,CAAC,GAAGP,wBAAwB,CAAC,CAAC;EAC/C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;MAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,YAAY,CAACI,IAAI,CAACL,SAAS,CAAC;IAC9B,CAAC;IACDE,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,MAAM,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,KAAK;IACpEb,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EAAEb;MAChB,CAAC;MACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,QAAQ;QAAEC,QAAQ;QAAEC,aAAa;QAAEC;MAAS,CAAC;IACtE,CAAC,CAAC;IAEF,MAAML,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAIH,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;MAC3BnB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAAC,4CAA4C,CAAC;MACtD,OAAO;QAAEsB,EAAE,EAAE;MAAM,CAAC;IACtB;IAEA,IAAI,CAACf,QAAQ,CAACe,EAAE,EAAE;MAChBtB,QAAQ,CAACU,IAAI,CAACX,KAAK,CAAC;MACpBG,YAAY,CAAC,KAAK,CAAC;IACrB;IACA,IAAIK,QAAQ,CAACe,EAAE,EAAE;MACfC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC;MAClDP,QAAQ,CAAC;QAAEsB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEhB;MAAK,CAAC,CAAC;MAC1CR,YAAY,CAAC,KAAK,CAAC;IACrB;IACA,OAAOK,QAAQ;EACjB,CAAC;EAED,OAAO;IAAEI,MAAM;IAAEV,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAAAD,EAAA,CAlDYD,SAAS;EAAA,QAGCD,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}