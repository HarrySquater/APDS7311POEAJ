{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { usePaymentsContext } from './usePaymentContext';\nexport const usePayment = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(null);\n  const [messageType, setMessageType] = useState(null);\n  const [csrfToken, setCsrfToken] = useState(null);\n  const {\n    dispatch\n  } = usePaymentsContext();\n  useEffect(() => {\n    // fetching the CSRF token\n    const fetchCsrfToken = async () => {\n      const response = await fetch('/api/csrf-token');\n      const data = await response.json();\n      setCsrfToken(data.csrfToken);\n    };\n    fetchCsrfToken();\n  }, []);\n  const createPayment = async paymentData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/payments/createPayment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': csrfToken\n        },\n        body: JSON.stringify(paymentData)\n      });\n      if (!response.ok) {\n        throw new Error('Payment failed, please ensure all fields are correct');\n      }\n      const payment = await response.json();\n      dispatch({\n        type: 'CREATE_PAYMENT',\n        payload: payment\n      });\n      setMessage('Payment successful');\n      setMessageType('success');\n      setIsLoading(false);\n      return {\n        ok: true,\n        payment\n      };\n    } catch (error) {\n      setMessage(error.message);\n      setMessageType('error');\n      setError(error.message);\n      setIsLoading(false);\n      return {\n        ok: false\n      };\n    }\n  };\n  const getPayments = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/payments/getPayments');\n      if (!response.ok) {\n        throw new Error('Failed to fetch payments');\n      }\n      const payments = await response.json();\n      dispatch({\n        type: 'SET_PAYMENTS',\n        payload: payments\n      });\n      setIsLoading(false);\n      return {\n        ok: true,\n        payments\n      };\n    } catch (error) {\n      setMessage(error.message);\n      setMessageType('error');\n      setError(error.message);\n      setIsLoading(false);\n      return {\n        ok: false\n      };\n    }\n  };\n  const verifyPayment = async (id, swiftAccount, swiftCode) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/payments/verifyPayment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'CSRF-Token': csrfToken\n        },\n        body: JSON.stringify({\n          id,\n          swiftAccount,\n          swiftCode\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to verify payment.');\n      }\n      const updatedPayment = await response.json();\n      dispatch({\n        type: 'UPDATE_PAYMENT',\n        payload: updatedPayment\n      }); // Dispatch here\n\n      setIsLoading(false);\n      return {\n        ok: true,\n        payment: updatedPayment\n      };\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n      return {\n        ok: false\n      };\n    }\n  };\n  return {\n    createPayment,\n    getPayments,\n    verifyPayment,\n    error,\n    isLoading,\n    message,\n    messageType\n  };\n};\n_s(usePayment, \"bniJvW/UBbjdRqKEuxcO9yDmFsQ=\", false, function () {\n  return [usePaymentsContext];\n});","map":{"version":3,"names":["useState","useEffect","usePaymentsContext","usePayment","_s","error","setError","isLoading","setIsLoading","message","setMessage","messageType","setMessageType","csrfToken","setCsrfToken","dispatch","fetchCsrfToken","response","fetch","data","json","createPayment","paymentData","method","headers","body","JSON","stringify","ok","Error","payment","type","payload","getPayments","payments","verifyPayment","id","swiftAccount","swiftCode","updatedPayment"],"sources":["C:/Users/Jarrod/Documents/GitHub/APDS7311POEAJ/frontend/src/hooks/usePayment.js"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { usePaymentsContext } from './usePaymentContext'\r\n\r\nexport const usePayment = () => {\r\n  const [error, setError] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n  const [messageType, setMessageType] = useState(null)\r\n  const [csrfToken, setCsrfToken] = useState(null)\r\n  const { dispatch } = usePaymentsContext()\r\n\r\n  useEffect(() => {\r\n    // fetching the CSRF token\r\n    const fetchCsrfToken = async () => {\r\n      const response = await fetch('/api/csrf-token')\r\n      const data = await response.json()\r\n      setCsrfToken(data.csrfToken)\r\n    }\r\n    fetchCsrfToken()\r\n  }, [])\r\n\r\n  const createPayment = async (paymentData) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await fetch('/api/payments/createPayment', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'CSRF-Token': csrfToken,\r\n        },\r\n        body: JSON.stringify(paymentData),\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Payment failed, please ensure all fields are correct')\r\n      }\r\n\r\n      const payment = await response.json()\r\n      dispatch({ type: 'CREATE_PAYMENT', payload: payment })\r\n\r\n      setMessage('Payment successful')\r\n      setMessageType('success')\r\n      setIsLoading(false)\r\n      return { ok: true, payment }\r\n    } catch (error) {\r\n      setMessage(error.message)\r\n      setMessageType('error')\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      return { ok: false }\r\n    }\r\n  }\r\n\r\n  const getPayments = async () => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await fetch('/api/payments/getPayments')\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch payments')\r\n      }\r\n\r\n      const payments = await response.json()\r\n      dispatch({ type: 'SET_PAYMENTS', payload: payments })\r\n\r\n      setIsLoading(false)\r\n      return { ok: true, payments }\r\n    } catch (error) {\r\n      setMessage(error.message)\r\n      setMessageType('error')\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      return { ok: false }\r\n    }\r\n  }\r\n\r\n  const verifyPayment = async (id, swiftAccount, swiftCode) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const response = await fetch('/api/payments/verifyPayment', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'CSRF-Token': csrfToken,\r\n        },\r\n        body: JSON.stringify({ id, swiftAccount, swiftCode }),\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to verify payment.')\r\n      }\r\n\r\n      const updatedPayment = await response.json()\r\n      dispatch({ type: 'UPDATE_PAYMENT', payload: updatedPayment }) // Dispatch here\r\n\r\n      setIsLoading(false)\r\n      return { ok: true, payment: updatedPayment }\r\n    } catch (error) {\r\n      setError(error.message)\r\n      setIsLoading(false)\r\n      return { ok: false }\r\n    }\r\n  }\r\n\r\n  return {\r\n    createPayment,\r\n    getPayments,\r\n    verifyPayment,\r\n    error,\r\n    isLoading,\r\n    message,\r\n    messageType,\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,kBAAkB,QAAQ,qBAAqB;AAExD,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAEe;EAAS,CAAC,GAAGb,kBAAkB,CAAC,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;MAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCN,YAAY,CAACK,IAAI,CAACN,SAAS,CAAC;IAC9B,CAAC;IACDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3Cd,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEX;QAChB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,MAAMC,OAAO,GAAG,MAAMb,QAAQ,CAACG,IAAI,CAAC,CAAC;MACrCL,QAAQ,CAAC;QAAEgB,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEF;MAAQ,CAAC,CAAC;MAEtDpB,UAAU,CAAC,oBAAoB,CAAC;MAChCE,cAAc,CAAC,SAAS,CAAC;MACzBJ,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE,IAAI;QAAEE;MAAQ,CAAC;IAC9B,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACdK,UAAU,CAACL,KAAK,CAACI,OAAO,CAAC;MACzBG,cAAc,CAAC,OAAO,CAAC;MACvBN,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;MACvBD,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE;MAAM,CAAC;IACtB;EACF,CAAC;EAED,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BzB,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,CAAC;MAEzD,IAAI,CAACD,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,MAAMK,QAAQ,GAAG,MAAMjB,QAAQ,CAACG,IAAI,CAAC,CAAC;MACtCL,QAAQ,CAAC;QAAEgB,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEE;MAAS,CAAC,CAAC;MAErD1B,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE,IAAI;QAAEM;MAAS,CAAC;IAC/B,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdK,UAAU,CAACL,KAAK,CAACI,OAAO,CAAC;MACzBG,cAAc,CAAC,OAAO,CAAC;MACvBN,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;MACvBD,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE;MAAM,CAAC;IACtB;EACF,CAAC;EAED,MAAMO,aAAa,GAAG,MAAAA,CAAOC,EAAE,EAAEC,YAAY,EAAEC,SAAS,KAAK;IAC3D9B,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAEX;QAChB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAES,EAAE;UAAEC,YAAY;UAAEC;QAAU,CAAC;MACtD,CAAC,CAAC;MAEF,IAAI,CAACrB,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,MAAMU,cAAc,GAAG,MAAMtB,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC5CL,QAAQ,CAAC;QAAEgB,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEO;MAAe,CAAC,CAAC,EAAC;;MAE9D/B,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE,IAAI;QAAEE,OAAO,EAAES;MAAe,CAAC;IAC9C,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACI,OAAO,CAAC;MACvBD,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO;QAAEoB,EAAE,EAAE;MAAM,CAAC;IACtB;EACF,CAAC;EAED,OAAO;IACLP,aAAa;IACbY,WAAW;IACXE,aAAa;IACb9B,KAAK;IACLE,SAAS;IACTE,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAAAP,EAAA,CApHYD,UAAU;EAAA,QAMAD,kBAAkB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}